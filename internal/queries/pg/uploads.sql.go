// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: uploads.sql

package pg

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUploadsByIds = `-- name: DeleteUploadsByIds :exec
delete from uploads where id = ANY($1::uuid[])
`

func (q *Queries) DeleteUploadsByIds(ctx context.Context, ids []uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUploadsByIds, ids)
	return err
}

const getOldInProgressParts = `-- name: GetOldInProgressParts :many
select id, server_url, upload_id, number, size, created_at, status from parts where created_at < $1 and status = 'in_progress'
`

func (q *Queries) GetOldInProgressParts(ctx context.Context, createdAt pgtype.Timestamptz) ([]Part, error) {
	rows, err := q.db.Query(ctx, getOldInProgressParts, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Part
	for rows.Next() {
		var i Part
		if err := rows.Scan(
			&i.ID,
			&i.ServerUrl,
			&i.UploadID,
			&i.Number,
			&i.Size,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOldInProgressUploads = `-- name: GetOldInProgressUploads :many
select id, name, size, status, created_at from uploads where created_at < $1 and status = 'in_progress'
`

func (q *Queries) GetOldInProgressUploads(ctx context.Context, createdAt pgtype.Timestamptz) ([]Upload, error) {
	rows, err := q.db.Query(ctx, getOldInProgressUploads, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upload
	for rows.Next() {
		var i Upload
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Size,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpload = `-- name: GetUpload :one
select id, name, size, status, created_at from uploads where id = $1
`

func (q *Queries) GetUpload(ctx context.Context, id uuid.UUID) (Upload, error) {
	row := q.db.QueryRow(ctx, getUpload, id)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Size,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getUploadParts = `-- name: GetUploadParts :many
select id, server_url, upload_id, number, size, created_at, status from parts where upload_id = $1
`

func (q *Queries) GetUploadParts(ctx context.Context, id uuid.UUID) ([]Part, error) {
	rows, err := q.db.Query(ctx, getUploadParts, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Part
	for rows.Next() {
		var i Part
		if err := rows.Scan(
			&i.ID,
			&i.ServerUrl,
			&i.UploadID,
			&i.Number,
			&i.Size,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPart = `-- name: InsertPart :exec
insert into parts (id, server_url, upload_id, number, size, status)
values ($1, $2, $3, $4, $5, $6)
`

type InsertPartParams struct {
	ID        uuid.UUID
	ServerUrl string
	UploadID  uuid.UUID
	Number    int32
	Size      int64
	Status    UploadStatus
}

func (q *Queries) InsertPart(ctx context.Context, arg InsertPartParams) error {
	_, err := q.db.Exec(ctx, insertPart,
		arg.ID,
		arg.ServerUrl,
		arg.UploadID,
		arg.Number,
		arg.Size,
		arg.Status,
	)
	return err
}

const insertUpload = `-- name: InsertUpload :exec
insert into uploads (id, name, size, status, created_at)
values ($1, $2, $3, $4, $5)
`

type InsertUploadParams struct {
	ID        uuid.UUID
	Name      string
	Size      int64
	Status    UploadStatus
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) InsertUpload(ctx context.Context, arg InsertUploadParams) error {
	_, err := q.db.Exec(ctx, insertUpload,
		arg.ID,
		arg.Name,
		arg.Size,
		arg.Status,
		arg.CreatedAt,
	)
	return err
}

const updatePartAsDone = `-- name: UpdatePartAsDone :exec
update parts set status = 'done' where id = $1
`

func (q *Queries) UpdatePartAsDone(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updatePartAsDone, id)
	return err
}

const updateUploadAsDone = `-- name: UpdateUploadAsDone :exec
update uploads set status = 'done' where id = $1
`

func (q *Queries) UpdateUploadAsDone(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateUploadAsDone, id)
	return err
}
