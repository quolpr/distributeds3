// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package pg

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type UploadStatus string

const (
	UploadStatusInProgress UploadStatus = "in_progress"
	UploadStatusDone       UploadStatus = "done"
)

func (e *UploadStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UploadStatus(s)
	case string:
		*e = UploadStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UploadStatus: %T", src)
	}
	return nil
}

type NullUploadStatus struct {
	UploadStatus UploadStatus
	Valid        bool // Valid is true if UploadStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUploadStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UploadStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UploadStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUploadStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UploadStatus), nil
}

type Part struct {
	ID        uuid.UUID
	ServerUrl string
	UploadID  uuid.UUID
	Number    int32
	Size      int64
	CreatedAt pgtype.Timestamptz
	Status    UploadStatus
}

type Upload struct {
	ID        uuid.UUID
	Name      string
	Size      int64
	Status    UploadStatus
	CreatedAt pgtype.Timestamptz
}
